import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:universally/universally.dart';

class BaseXSwitch extends ChangedBuilder<bool> {
  BaseXSwitch({
    super.key,
    required super.value,
    super.onChanged,
    super.onWaitChanged,
    Color? activeColor,
    Color? trackColor,
    Color thumbColor = Colors.white,
    double radius = 12.0,
    Size size = const Size(48.0, 24.0),
    Duration duration = const Duration(milliseconds: 250),
    DragStartBehavior dragStartBehavior = DragStartBehavior.start,
  }) : super(
            builder: (bool value, onChanged) => XSwitch(
                activeColor: activeColor ?? Universally().mainColor,
                radius: radius,
                size: size,
                duration: duration,
                dragStartBehavior: dragStartBehavior,
                trackColor: trackColor,
                thumbColor: thumbColor,
                value: value,
                onChanged: onChanged));
}

class BaseSwitch extends ChangedBuilder<bool> {
  BaseSwitch({
    super.key,
    required super.value,
    super.onChanged,
    super.onWaitChanged,
    Color? activeColor,
    Color? activeTrackColor,
    MaterialStateProperty<Color?>? trackColor,
    MaterialStateProperty<Color?>? thumbColor,
    Color? inactiveThumbColor,
    Color? inactiveTrackColor,
    ImageProvider? activeThumbImage,
    ImageErrorListener? onActiveThumbImageError,
    ImageProvider? inactiveThumbImage,
    ImageErrorListener? onInactiveThumbImageError,
    MaterialTapTargetSize? materialTapTargetSize,
    MaterialStateProperty<Color?>? trackOutlineColor,
    MaterialStateProperty<double?>? trackOutlineWidth,
    MaterialStateProperty<Icon?>? thumbIcon,
    DragStartBehavior dragStartBehavior = DragStartBehavior.start,
    MouseCursor? mouseCursor,
    Color? focusColor,
    Color? hoverColor,
    MaterialStateProperty<Color?>? overlayColor,
    double? splashRadius,
    FocusNode? focusNode,
    ValueChanged<bool>? onFocusChange,
    bool autofocus = false,
  }) : super(
            builder: (bool value, onChanged) => Switch(
                  trackColor: trackColor,
                  thumbColor: thumbColor,
                  activeTrackColor: activeTrackColor,
                  activeColor: activeColor ?? Universally().mainColor,
                  value: value,
                  onChanged: onChanged,
                  inactiveThumbColor: inactiveThumbColor,
                  inactiveTrackColor: inactiveTrackColor,
                  activeThumbImage: activeThumbImage,
                  onActiveThumbImageError: onActiveThumbImageError,
                  inactiveThumbImage: inactiveThumbImage,
                  onInactiveThumbImageError: onInactiveThumbImageError,
                  materialTapTargetSize: materialTapTargetSize,
                  trackOutlineColor: trackOutlineColor,
                  trackOutlineWidth: trackOutlineWidth,
                  thumbIcon: thumbIcon,
                  dragStartBehavior: dragStartBehavior,
                  mouseCursor: mouseCursor,
                  focusColor: focusColor,
                  hoverColor: hoverColor,
                  overlayColor: overlayColor,
                  splashRadius: splashRadius,
                  focusNode: focusNode,
                  onFocusChange: onFocusChange,
                  autofocus: autofocus,
                ));

  BaseSwitch.adaptive({
    super.key,
    required super.value,
    super.onChanged,
    super.onWaitChanged,
    Color? activeColor,
    Color? activeTrackColor,
    MaterialStateProperty<Color?>? trackColor,
    MaterialStateProperty<Color?>? thumbColor,
    Color? inactiveThumbColor,
    Color? inactiveTrackColor,
    ImageProvider? activeThumbImage,
    ImageErrorListener? onActiveThumbImageError,
    ImageProvider? inactiveThumbImage,
    ImageErrorListener? onInactiveThumbImageError,
    MaterialTapTargetSize? materialTapTargetSize,
    MaterialStateProperty<Color?>? trackOutlineColor,
    MaterialStateProperty<double?>? trackOutlineWidth,
    MaterialStateProperty<Icon?>? thumbIcon,
    DragStartBehavior dragStartBehavior = DragStartBehavior.start,
    MouseCursor? mouseCursor,
    Color? focusColor,
    Color? hoverColor,
    MaterialStateProperty<Color?>? overlayColor,
    double? splashRadius,
    FocusNode? focusNode,
    ValueChanged<bool>? onFocusChange,
    bool autofocus = false,
    bool? applyCupertinoTheme,
  }) : super(
            builder: (bool value, onChanged) => Switch.adaptive(
                  trackColor: trackColor,
                  thumbColor: thumbColor,
                  activeTrackColor: activeTrackColor,
                  activeColor: activeColor ?? Universally().mainColor,
                  value: value,
                  onChanged: onChanged,
                  inactiveThumbColor: inactiveThumbColor,
                  inactiveTrackColor: inactiveTrackColor,
                  activeThumbImage: activeThumbImage,
                  onActiveThumbImageError: onActiveThumbImageError,
                  inactiveThumbImage: inactiveThumbImage,
                  onInactiveThumbImageError: onInactiveThumbImageError,
                  materialTapTargetSize: materialTapTargetSize,
                  trackOutlineColor: trackOutlineColor,
                  trackOutlineWidth: trackOutlineWidth,
                  thumbIcon: thumbIcon,
                  dragStartBehavior: dragStartBehavior,
                  mouseCursor: mouseCursor,
                  focusColor: focusColor,
                  hoverColor: hoverColor,
                  overlayColor: overlayColor,
                  splashRadius: splashRadius,
                  focusNode: focusNode,
                  onFocusChange: onFocusChange,
                  autofocus: autofocus,
                  applyCupertinoTheme: applyCupertinoTheme,
                ));
}

class BaseCheckbox extends ChangedBuilder<bool?> {
  BaseCheckbox({
    super.key,
    required super.value,
    super.onChanged,
    super.onWaitChanged,
    MouseCursor? mouseCursor,
    Color? activeColor,
    MaterialStateProperty<Color?>? fillColor,
    Color? checkColor,
    bool tristate = false,
    MaterialTapTargetSize? materialTapTargetSize,
    VisualDensity? visualDensity,
    Color? focusColor,
    Color? hoverColor,
    MaterialStateProperty<Color?>? overlayColor,
    double? splashRadius,
    FocusNode? focusNode,
    bool autofocus = false,
    OutlinedBorder? shape,
    BorderSide? side,
    bool isError = false,
    String? semanticLabel,
  }) : super(
            builder: (bool? value, onChanged) => Checkbox(
                  activeColor: activeColor ?? Universally().mainColor,
                  value: value,
                  onChanged: onChanged,
                  mouseCursor: mouseCursor,
                  fillColor: fillColor,
                  checkColor: checkColor,
                  tristate: tristate,
                  materialTapTargetSize: materialTapTargetSize,
                  visualDensity: visualDensity,
                  focusColor: focusColor,
                  hoverColor: hoverColor,
                  overlayColor: overlayColor,
                  splashRadius: splashRadius,
                  focusNode: focusNode,
                  autofocus: autofocus,
                  shape: shape,
                  side: side,
                  isError: isError,
                  semanticLabel: semanticLabel,
                ));

  BaseCheckbox.adaptive({
    super.key,
    required super.value,
    super.onChanged,
    super.onWaitChanged,
    MouseCursor? mouseCursor,
    Color? activeColor,
    MaterialStateProperty<Color?>? fillColor,
    Color? checkColor,
    bool tristate = false,
    MaterialTapTargetSize? materialTapTargetSize,
    VisualDensity? visualDensity,
    Color? focusColor,
    Color? hoverColor,
    MaterialStateProperty<Color?>? overlayColor,
    double? splashRadius,
    FocusNode? focusNode,
    bool autofocus = false,
    OutlinedBorder? shape,
    BorderSide? side,
    bool isError = false,
    String? semanticLabel,
  }) : super(
            builder: (bool? value, onChanged) => Checkbox.adaptive(
                  activeColor: activeColor ?? Universally().mainColor,
                  value: value,
                  onChanged: onChanged,
                  mouseCursor: mouseCursor,
                  fillColor: fillColor,
                  checkColor: checkColor,
                  tristate: tristate,
                  materialTapTargetSize: materialTapTargetSize,
                  visualDensity: visualDensity,
                  focusColor: focusColor,
                  hoverColor: hoverColor,
                  overlayColor: overlayColor,
                  splashRadius: splashRadius,
                  focusNode: focusNode,
                  autofocus: autofocus,
                  shape: shape,
                  side: side,
                  isError: isError,
                  semanticLabel: semanticLabel,
                ));
}
